//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.file` struct is generated, and contains static references to 3 files.
  struct file {
    /// Resource file `HuaWenYuanTi-Bold.ttf`.
    static let huaWenYuanTiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HuaWenYuanTi-Bold", pathExtension: "ttf")
    /// Resource file `HuaWenYuanTi-Regular.ttf`.
    static let huaWenYuanTiRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HuaWenYuanTi-Regular", pathExtension: "ttf")
    /// Resource file `run-swiftlint.sh`.
    static let runSwiftlintSh = Rswift.FileResource(bundle: R.hostingBundle, name: "run-swiftlint", pathExtension: "sh")

    /// `bundle.url(forResource: "HuaWenYuanTi-Bold", withExtension: "ttf")`
    static func huaWenYuanTiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.huaWenYuanTiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "HuaWenYuanTi-Regular", withExtension: "ttf")`
    static func huaWenYuanTiRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.huaWenYuanTiRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "run-swiftlint", withExtension: "sh")`
    static func runSwiftlintSh(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.runSwiftlintSh
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 2 fonts.
  struct font: Rswift.Validatable {
    /// Font `STYuanti-SC-Bold`.
    static let stYuantiSCBold = Rswift.FontResource(fontName: "STYuanti-SC-Bold")
    /// Font `STYuanti-SC-Regular`.
    static let stYuantiSCRegular = Rswift.FontResource(fontName: "STYuanti-SC-Regular")

    /// `UIFont(name: "STYuanti-SC-Bold", size: ...)`
    static func stYuantiSCBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: stYuantiSCBold, size: size)
    }

    /// `UIFont(name: "STYuanti-SC-Regular", size: ...)`
    static func stYuantiSCRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: stYuantiSCRegular, size: size)
    }

    static func validate() throws {
      if R.font.stYuantiSCBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'STYuanti-SC-Bold' could not be loaded, is 'HuaWenYuanTi-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.stYuantiSCRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'STYuanti-SC-Regular' could not be loaded, is 'HuaWenYuanTi-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 6 images.
  struct image {
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `iconPerson`.
    static let iconPerson = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconPerson")
    /// Image `iconReminder`.
    static let iconReminder = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconReminder")
    /// Image `iconStar`.
    static let iconStar = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconStar")
    /// Image `iconSun`.
    static let iconSun = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconSun")
    /// Image `iconTask`.
    static let iconTask = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconTask")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconPerson", bundle: ..., traitCollection: ...)`
    static func iconPerson(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPerson, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconReminder", bundle: ..., traitCollection: ...)`
    static func iconReminder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconReminder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconStar", bundle: ..., traitCollection: ...)`
    static func iconStar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconStar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconSun", bundle: ..., traitCollection: ...)`
    static func iconSun(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSun, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconTask", bundle: ..., traitCollection: ...)`
    static func iconTask(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTask, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.root` struct is generated, and contains static references to 10 localization keys.
    struct root {
      /// Value: 个人中心
      static let tabProfileTitle = Rswift.StringResource(key: "tab-profile-title", tableName: "root", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 任务
      static let menuItemTask = Rswift.StringResource(key: "menu-item-task", tableName: "root", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 创建项目
      static let todoTitle = Rswift.StringResource(key: "todo-title", tableName: "root", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 发现
      static let tabDiscoverTitle = Rswift.StringResource(key: "tab-discover-title", tableName: "root", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 奖励
      static let tabAwardTitle = Rswift.StringResource(key: "tab-award-title", tableName: "root", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 已分配给你
      static let menuItemAssign = Rswift.StringResource(key: "menu-item-assign", tableName: "root", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 已计划日程
      static let menuItemPlan = Rswift.StringResource(key: "menu-item-plan", tableName: "root", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 我的一天
      static let menuItemOneDay = Rswift.StringResource(key: "menu-item-one-day", tableName: "root", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 重要
      static let menuItemImportant = Rswift.StringResource(key: "menu-item-important", tableName: "root", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 首页
      static let tabHomeTitle = Rswift.StringResource(key: "tab-home-title", tableName: "root", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: 个人中心
      static func tabProfileTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tab-profile-title", tableName: "root", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "root", preferredLanguages: preferredLanguages) else {
          return "tab-profile-title"
        }

        return NSLocalizedString("tab-profile-title", tableName: "root", bundle: bundle, comment: "")
      }

      /// Value: 任务
      static func menuItemTask(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu-item-task", tableName: "root", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "root", preferredLanguages: preferredLanguages) else {
          return "menu-item-task"
        }

        return NSLocalizedString("menu-item-task", tableName: "root", bundle: bundle, comment: "")
      }

      /// Value: 创建项目
      static func todoTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("todo-title", tableName: "root", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "root", preferredLanguages: preferredLanguages) else {
          return "todo-title"
        }

        return NSLocalizedString("todo-title", tableName: "root", bundle: bundle, comment: "")
      }

      /// Value: 发现
      static func tabDiscoverTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tab-discover-title", tableName: "root", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "root", preferredLanguages: preferredLanguages) else {
          return "tab-discover-title"
        }

        return NSLocalizedString("tab-discover-title", tableName: "root", bundle: bundle, comment: "")
      }

      /// Value: 奖励
      static func tabAwardTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tab-award-title", tableName: "root", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "root", preferredLanguages: preferredLanguages) else {
          return "tab-award-title"
        }

        return NSLocalizedString("tab-award-title", tableName: "root", bundle: bundle, comment: "")
      }

      /// Value: 已分配给你
      static func menuItemAssign(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu-item-assign", tableName: "root", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "root", preferredLanguages: preferredLanguages) else {
          return "menu-item-assign"
        }

        return NSLocalizedString("menu-item-assign", tableName: "root", bundle: bundle, comment: "")
      }

      /// Value: 已计划日程
      static func menuItemPlan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu-item-plan", tableName: "root", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "root", preferredLanguages: preferredLanguages) else {
          return "menu-item-plan"
        }

        return NSLocalizedString("menu-item-plan", tableName: "root", bundle: bundle, comment: "")
      }

      /// Value: 我的一天
      static func menuItemOneDay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu-item-one-day", tableName: "root", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "root", preferredLanguages: preferredLanguages) else {
          return "menu-item-one-day"
        }

        return NSLocalizedString("menu-item-one-day", tableName: "root", bundle: bundle, comment: "")
      }

      /// Value: 重要
      static func menuItemImportant(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu-item-important", tableName: "root", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "root", preferredLanguages: preferredLanguages) else {
          return "menu-item-important"
        }

        return NSLocalizedString("menu-item-important", tableName: "root", bundle: bundle, comment: "")
      }

      /// Value: 首页
      static func tabHomeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tab-home-title", tableName: "root", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "root", preferredLanguages: preferredLanguages) else {
          return "tab-home-title"
        }

        return NSLocalizedString("tab-home-title", tableName: "root", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MainTabBarViewController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
